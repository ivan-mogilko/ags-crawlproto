
static ObjectPosition *ObjectPosition::Create(int x, int y, ObjectDirection dir) {
	ObjectPosition wp = new ObjectPosition;
	wp.X = x;
	wp.Y = y;
	wp.Dir = dir;
	return wp;
}

static Point *Level::ObjectToMap(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  x; mpt.y = -y; break;
		case eDirEast:  mpt.x =  y; mpt.y =  x; break;
		case eDirSouth: mpt.x = -x; mpt.y =  y; break;
		case eDirWest:  mpt.x = -y; mpt.y = -x; break;
		default: System.Log(eLogDebug, "ObjectToMap: INVALID DIR"); break;
	}
	mpt.x += who.X;
	mpt.y += who.Y;
	return mpt;
}

static Point *Level::MapToObject(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	int dx = x - who.X;
	int dy = y - who.Y;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  dx; rel_pt.y = -dy; break;
		case eDirEast:  rel_pt.x =  dy; rel_pt.y =  dx; break;
		case eDirSouth: rel_pt.x = -dx; rel_pt.y =  dy; break;
		case eDirWest:  rel_pt.x = -dy; rel_pt.y = -dx; break;
		default: System.Log(eLogDebug, "MapToObject: INVALID DIR"); break;
	}
	return rel_pt;
}

static Point *Level::ObjectDeltaToMap(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  x; mpt.y = -y; break;
		case eDirEast:  mpt.x =  y; mpt.y =  x; break;
		case eDirSouth: mpt.x = -x; mpt.y =  y; break;
		case eDirWest:  mpt.x = -y; mpt.y = -x; break;
	}
	return mpt;
}

// NOTE: yes, it happens to be identical to ObjectDeltaToMap...
static Point *Level::MapDeltaToObject(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  x; rel_pt.y = -y; break;
		case eDirEast:  rel_pt.x =  y; rel_pt.y =  x; break;
		case eDirSouth: rel_pt.x = -x; rel_pt.y =  y; break;
		case eDirWest:  rel_pt.x = -y; rel_pt.y = -x; break;
	}
	return rel_pt;
}

static ObjectDirection Level::MapToObjectDir(ObjectPosition *who, ObjectDirection dir) {
	// FIXME: better algo?
	int delta_dir = dir - who.Dir;
	int rel_dir = eDirNorth + delta_dir;
	if (rel_dir < eDirNorth) {
		rel_dir = eDirWest + rel_dir;
	}
	return rel_dir;
}

static Direction Level::DirToAGSLoop(ObjectDirection dir) {
	switch (dir) {
		case eDirNorth: return eDirectionUp;
		case eDirEast:  return eDirectionRight;
		case eDirSouth: return eDirectionDown;
		case eDirWest:  return eDirectionLeft;
		default: return eDirectionDown;
	}
}

static MapTransform *Level::GetObjectToMapTransform(ObjectPosition* who) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	int row_dx = 0, row_dy = 0, col_dx = 0, col_dy = 0;
	switch (who.Dir) {
		case eDirNorth: row_dy = -1; col_dx =  1; break;
		case eDirEast:  row_dx =  1; col_dy =  1; break;
		case eDirSouth: row_dy =  1; col_dx = -1; break;
		case eDirWest:  row_dx = -1; col_dy = -1; break;
	}
	MapTransform *t = new MapTransform;
	t.originX = who.X;
	t.originY = who.Y;
	t.viewRowAxisX = row_dx;
	t.viewRowAxisY = row_dy;
	t.viewColAxisX = col_dx;
	t.viewColAxisY = col_dy;
	return t;
}

int UpdateTexturedTile(int tex_id, int frame) {
	TextureSequence txseq = CLevel.TexSeq[tex_id];
	if (txseq != null && txseq.Type != eTxSeq_Fixed && txseq.Timer == 0) {
		if (txseq.Type == eTxSeq_Normal) {
			frame++;
			if (frame >= txseq.TexColor1.Length) {
				frame = 0;
			}
			return frame;
		} else {
			return Random(txseq.TexColor1.Length - 1);
		}
	}
	return frame;
}

static void Level::Tick() {
	// Update all animated cells
	for (int i = 0; i < CLevel.CellTiles.Length; ++i) {
		CellTile *ct = CLevel.CellTiles[i];
		if (ct.FloorTile >= 0) {
			ct.FloorFrame = UpdateTexturedTile(ct.FloorTile, ct.FloorFrame);
		}
		if (ct.CeilTile >= 0) {
			ct.CeilFrame = UpdateTexturedTile(ct.CeilTile, ct.CeilFrame);
		}
	}

	// Update all texture animations
	for (int i = 0; i < CLevel.TexSeq.Length; ++i) {
		TextureSequence txseq = CLevel.TexSeq[i];
		if (txseq != null && txseq.Type != eTxSeq_Fixed) {
			txseq.Timer--;
			if (txseq.Timer < 0) {
				txseq.Timer = txseq.FrameTime;
			}
		}
	}
}


Level CLevel;
export CLevel;
