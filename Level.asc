
static ObjectPosition *ObjectPosition::Create(int x, int y, ObjectDirection dir) {
	ObjectPosition wp = new ObjectPosition;
	wp.X = x;
	wp.Y = y;
	wp.Dir = dir;
	return wp;
}

static Point *Level::ObjectToMap(ObjectPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  pt.x; mpt.y = -pt.y; break;
		case eDirEast:  mpt.x =  pt.y; mpt.y =  pt.x; break;
		case eDirSouth: mpt.x = -pt.x; mpt.y =  pt.y; break;
		case eDirWest:  mpt.x = -pt.y; mpt.y = -pt.x; break;
		default: System.Log(eLogDebug, "ObjectToMap: INVALID DIR"); break;
	}
	mpt.x += who.X;
	mpt.y += who.Y;
	return mpt;
}

static Point *Level::MapToObject(ObjectPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	int dx = pt.x - who.X;
	int dy = pt.y - who.Y;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  dx; rel_pt.y = -dy; break;
		case eDirEast:  rel_pt.x =  dy; rel_pt.y =  dx; break;
		case eDirSouth: rel_pt.x = -dx; rel_pt.y =  dy; break;
		case eDirWest:  rel_pt.x = -dy; rel_pt.y = -dx; break;
		default: System.Log(eLogDebug, "MapToObject: INVALID DIR"); break;
	}
	return rel_pt;
}

static Point *Level::ObjectDeltaToMap(ObjectPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  pt.x; mpt.y = -pt.y; break;
		case eDirEast:  mpt.x =  pt.y; mpt.y =  pt.x; break;
		case eDirSouth: mpt.x = -pt.x; mpt.y =  pt.y; break;
		case eDirWest:  mpt.x = -pt.y; mpt.y = -pt.x; break;
	}
	return mpt;
}

// NOTE: yes, it happens to be identical to ObjectDeltaToMap...
static Point *Level::MapDeltaToObject(ObjectPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  pt.x; rel_pt.y = -pt.y; break;
		case eDirEast:  rel_pt.x =  pt.y; rel_pt.y =  pt.x; break;
		case eDirSouth: rel_pt.x = -pt.x; rel_pt.y =  pt.y; break;
		case eDirWest:  rel_pt.x = -pt.y; rel_pt.y = -pt.x; break;
	}
	return rel_pt;
}

static ObjectDirection Level::MapToObjectDir(ObjectPosition *who, ObjectDirection dir) {
	// FIXME: better algo?
	int delta_dir = dir - who.Dir;
	int rel_dir = eDirNorth + delta_dir;
	if (rel_dir < eDirNorth) {
		rel_dir = eDirWest + rel_dir;
	}
	return rel_dir;
}

static Direction Level::WorldDirToAGSLoop(ObjectDirection dir) {
	switch (dir) {
		case eDirNorth: return eDirectionUp;
		case eDirEast:  return eDirectionRight;
		case eDirSouth: return eDirectionDown;
		case eDirWest:  return eDirectionLeft;
		default: return eDirectionDown;
	}
}

static MapTransform *Level::GetObjectToMapTransform(ObjectPosition* who) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	int row_dx = 0, row_dy = 0, col_dx = 0, col_dy = 0;
	switch (who.Dir) {
		case eDirNorth: row_dy = -1; col_dx =  1; break;
		case eDirEast:  row_dx =  1; col_dy =  1; break;
		case eDirSouth: row_dy =  1; col_dx = -1; break;
		case eDirWest:  row_dx = -1; col_dy = -1; break;
	}
	MapTransform *t = new MapTransform;
	t.originX = who.X;
	t.originY = who.Y;
	t.viewRowAxisX = row_dx;
	t.viewRowAxisY = row_dy;
	t.viewColAxisX = col_dx;
	t.viewColAxisY = col_dy;
	return t;
}


Level CLevel;
export CLevel;
