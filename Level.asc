
static ObjectPosition *ObjectPosition::Create(int x, int y, ObjectDirection dir) {
	ObjectPosition wp = new ObjectPosition;
	wp.X = x;
	wp.Y = y;
	wp.Dir = dir;
	return wp;
}

static LevelObject *LevelObject::Create(LevelObjectClass def, int x, int y, ObjectDirection dir) {
	return LevelObject.Create2(def, ObjectPosition.Create(x, y, dir));
}

static LevelObject *LevelObject::Create2(LevelObjectClass def, ObjectPosition pos) {
	LevelObject obj = new LevelObject;
	obj.Def = def;
	obj.Pos = pos;
	obj.View = def.View;
	obj.Loop = def.Loop;
	obj.Over = Overlay.CreateRoomGraphical(0, 0, 0);
	return obj;
}

static Point *Level::ObjectToMap(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  x; mpt.y = -y; break;
		case eDirEast:  mpt.x =  y; mpt.y =  x; break;
		case eDirSouth: mpt.x = -x; mpt.y =  y; break;
		case eDirWest:  mpt.x = -y; mpt.y = -x; break;
		default: System.Log(eLogDebug, "ObjectToMap: INVALID DIR"); break;
	}
	mpt.x += who.X;
	mpt.y += who.Y;
	return mpt;
}

static Point *Level::MapToObject(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	int dx = x - who.X;
	int dy = y - who.Y;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  dx; rel_pt.y = -dy; break;
		case eDirEast:  rel_pt.x =  dy; rel_pt.y =  dx; break;
		case eDirSouth: rel_pt.x = -dx; rel_pt.y =  dy; break;
		case eDirWest:  rel_pt.x = -dy; rel_pt.y = -dx; break;
		default: System.Log(eLogDebug, "MapToObject: INVALID DIR"); break;
	}
	return rel_pt;
}

static Point *Level::ObjectDeltaToMap(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  x; mpt.y = -y; break;
		case eDirEast:  mpt.x =  y; mpt.y =  x; break;
		case eDirSouth: mpt.x = -x; mpt.y =  y; break;
		case eDirWest:  mpt.x = -y; mpt.y = -x; break;
	}
	return mpt;
}

// NOTE: yes, it happens to be identical to ObjectDeltaToMap...
static Point *Level::MapDeltaToObject(ObjectPosition *who, int x, int y) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  x; rel_pt.y = -y; break;
		case eDirEast:  rel_pt.x =  y; rel_pt.y =  x; break;
		case eDirSouth: rel_pt.x = -x; rel_pt.y =  y; break;
		case eDirWest:  rel_pt.x = -y; rel_pt.y = -x; break;
	}
	return rel_pt;
}

static ObjectDirection Level::MapToObjectDir(ObjectPosition *who, ObjectDirection dir) {
	// FIXME: better algo?
	int delta_dir = dir - who.Dir;
	int rel_dir = eDirNorth + delta_dir;
	if (rel_dir < eDirNorth) {
		rel_dir = eDirWest + rel_dir;
	}
	return rel_dir;
}

static Direction Level::DirToAGSLoop(ObjectDirection dir) {
	switch (dir) {
		case eDirNorth: return eDirectionUp;
		case eDirEast:  return eDirectionRight;
		case eDirSouth: return eDirectionDown;
		case eDirWest:  return eDirectionLeft;
		default: return eDirectionDown;
	}
}

static MapTransform *Level::GetObjectToMapTransform(ObjectPosition* who) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	int row_dx = 0, row_dy = 0, col_dx = 0, col_dy = 0;
	switch (who.Dir) {
		case eDirNorth: row_dy = -1; col_dx =  1; break;
		case eDirEast:  row_dx =  1; col_dy =  1; break;
		case eDirSouth: row_dy =  1; col_dx = -1; break;
		case eDirWest:  row_dx = -1; col_dy = -1; break;
	}
	MapTransform *t = new MapTransform;
	t.originX = who.X;
	t.originY = who.Y;
	t.viewRowAxisX = row_dx;
	t.viewRowAxisY = row_dy;
	t.viewColAxisX = col_dx;
	t.viewColAxisY = col_dy;
	return t;
}

int UpdateTexturedTile(TextureType tex_type, int tex_id, int frame) {
	TileDefinition tiledef = CLevel.TileDefs[tex_id];
	TextureSequence txseq = tiledef.Seq[tex_type];
	if (txseq == null || txseq.Type == eTxSeq_Fixed || txseq.Timer > 0) {
		return frame;
	}

	if (txseq.Type == eTxSeq_Normal) {
		frame++;
		if (frame >= txseq.Color1.Length) {
			frame = 0;
		}
		return frame;
	} else {
		return Random(txseq.Color1.Length - 1);
	}
}

static void Level::AddObject(LevelObject *obj) {
	int index = Array_TryAdd(CLevel.LevelObjects, obj);
	if (index < 0) {
		int old_len = Array_SafeLength(CLevel.LevelObjects);
		LevelObject *new_arr[] = new LevelObject[old_len + 10];
		Array_Copy(new_arr, CLevel.LevelObjects, old_len);
		new_arr[old_len] = obj;
		CLevel.LevelObjects = new_arr;
	}
}

static LevelObject Level::AddObject2(LevelObjectClass *def, int x, int y, ObjectDirection dir) {
	LevelObject obj = LevelObject.Create(def, x, y, dir);
	ViewFrame *vf = Game.GetViewFrame(obj.View, obj.Loop, obj.Frame);
	obj.Timer = vf.Speed;
	CLevel.AddObject(obj);
	return obj;
}

static void Level::RemoveObject(LevelObject *obj) {
	Array_TryRemove(CLevel.LevelObjects, obj);
}

static void Level::RemoveObject2(int index) {
	if (index >= 0 && index < CLevel.LevelObjects.Length) {
		CLevel.LevelObjects[index] = null;
	}
}

static void Level::Tick() {
	// Update all animated cells
	for (int i = 0; i < CLevel.CellTiles.Length; ++i) {
		CellTile *ct = CLevel.CellTiles[i];
		if (ct.Floor.DefID >= 0) {
			ct.Floor.Frame = UpdateTexturedTile(eTxType_Floor, ct.Floor.DefID, ct.Floor.Frame);
		}
		if (ct.Ceil.DefID >= 0) {
			ct.Ceil.Frame = UpdateTexturedTile(eTxType_Ceil, ct.Ceil.DefID, ct.Ceil.Frame);
		}
	}

	// Update all texture animations
	for (int i = 0; i < CLevel.TileDefs.Length; ++i) {
		for (TextureType txtype = 0; txtype < eTxType_Base; ++txtype) {
			TextureSequence txseq = CLevel.TileDefs[i].Seq[txtype];
			if (txseq != null && txseq.Type != eTxSeq_Fixed) {
				txseq.Timer--;
				if (txseq.Timer < 0) {
					txseq.Timer = txseq.FrameTime;
				}
			}
		}		
	}

	// Update all cell objects
	// TODO: think how to pick out Animation struct and use in various structs, 
	// such as TextureSequence, CellObject, etc
	if (CLevel.LevelObjectTypes.Length > 0) {
		for (int i = 0; i < CLevel.LevelObjects.Length; ++i) {
			LevelObject *obj = CLevel.LevelObjects[i];
			if (obj == null) {
				continue;
			}
			obj.Timer--;
			if (obj.Timer < 0) {
				obj.Frame++;
				if (obj.Frame >= Game.GetFrameCountForLoop(obj.View, obj.Loop)) {
					// If should animate only once, then stop here
					if (obj.Def.AnimateOnceAndRemove) {
						CLevel.RemoveObject2(i);
						continue;
					}
					obj.Frame = 0;
				}
				ViewFrame *vf = Game.GetViewFrame(obj.View, obj.Loop, obj.Frame);
				obj.Timer = vf.Speed;
			}
		}
	}
}

static void Level::Trigger(ObjectPosition *who, int row_from, int col_from, CommandTrigger trigger) {
	CellCommand *cc = CLevel.CellTriggers[who.Y * CLevel.MapWidth + who.X];
	if (cc != null && cc.Trigger == trigger) {
		Level.RunCommand(who, cc.Cmd.Type, cc.Cmd.Args[0], cc.Cmd.Args[1],
			cc.Cmd.Args[2], cc.Cmd.Args[3], cc.Cmd.Args[4], cc.Cmd.SArg);
	}
}

static void Level::RunCommand(ObjectPosition *who, GameCommand type,
			int arg1, int arg2, int arg3, int arg4, int arg5, String sarg) {
	switch (type) {
	case eCmdGotoCell:
		who.X = arg1; who.Y = arg2; who.Dir = arg3;
		// TODO: implement behavior flags, telling whether to cast teleport fx, etc
		if (CLevel.TeleportFx != null) {
			CLevel.AddObject2(CLevel.TeleportFx, arg1, arg2, arg3);
		}
		return;
	default:
		return;
	}
}


Level CLevel;
export CLevel;
