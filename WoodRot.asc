
DynamicSprite *SprFPV;
WorldPosition *playerEye;
export playerEye;

static void WoodRotGame::DrawGrid(DrawingSurface *dest, int x, int y, int w, int h) {
	DrawingSurface *ds = SprFPV.GetDrawingSurface();
	FirstPersonView.DrawGridFrame(ds, 12, 14);
	FirstPersonView.DrawViewport(ds, 15);
	ds.Release();
	dest.DrawImage(x, y, SprFPV.Graphic);
}

static void WoodRotGame::DrawPlayerView(DrawingSurface *dest, int x, int y, int w, int h) {
	DrawingSurface *ds = SprFPV.GetDrawingSurface();
	ds.Clear(0);
	FirstPersonView.DrawGridFrame(ds, 12, 14);
	//FirstPersonView.DrawLocation(ds, playerEye);
	//FirstPersonView.DrawViewport(ds, 15);
	ds.Release();
	dest.DrawImage(x, y, SprFPV.Graphic);
	
	FirstPersonView.ConstructLocation(x, y, w, h, playerEye, x, y);
}

static bool WoodRotGame::TryWalk(WorldPosition *who, int dx, int dy) {
	Point *ptdx = new Point;
	ptdx.x = dx; ptdx.y = dy; // FIXME: another function that takes dx, dy
	Point *ptoff = Location.ObjectDeltaToMap(who, ptdx);
	readonly int final_x = who.X + ptoff.x;
	readonly int final_y = who.Y + ptoff.y;
	readonly int ddx = Maths.Sign(ptoff.x);
	readonly int ddy = Maths.Sign(ptoff.y);
	
	//Display("who = %d,%d, final = %d,%d, ddx = %d,%d", who.X, who.Y, final_x, final_y, ddx, ddy);
	
	while (who.X != final_x || who.Y != final_y) {
		int test_x = who.X + ddx;
		int test_y = who.Y + ddy;
		//Display("test = %d,%d", test_x, test_y);
		if (test_x < 0 || test_x >= CLevel.MapWidth ||
			test_y < 0 || test_y >= CLevel.MapHeight) {
			//Display("out of bounds");
			return false;
		}
		// TODO: test passability bits
		if (CLevel.CellPassable[test_y * CLevel.MapWidth + test_x] > 0) {
			//Display("impassable");
			return false;
		}
		who.X = test_x;
		who.Y = test_y;
	}
	return true;
}

static WorldDirection WoodRotGame::Turn(WorldPosition *who, bool clockwise) {
	int dir = clockwise ? who.Dir + 1 : who.Dir - 1;
	if (dir < eDirNorth) {
		dir = eDirWest;
	} else if (dir > eDirWest) {
		dir = eDirNorth;
	}
	who.Dir = dir;
	return dir;
}

static WorldDirection WoodRotGame::Face(WorldPosition *who, WorldDirection dir) {
	who.Dir = dir;
	return dir;
}


function game_start()
{
	CV_Schema.SetView(WoodRotConstants.VIEWPORT_WIDTH,
					  WoodRotConstants.VIEWPORT_HEIGHT,
					  WoodRotConstants.VIEW_ROWS,
					  WoodRotConstants.VIEW_COLS);
	CV_Schema.SetUniformStrip(0, -16, 187, -22 - 285*5, 285);
	CV_Schema.SetUniformStrip(1, 18, 156, 24 - 192*5 , 192);
	CV_Schema.SetUniformStrip(2, 41, 133, 58 - 127*5, 127);
	CV_Schema.SetUniformStrip(3, 58, 115, 81 - 81*5, 81);
	CV_Schema.SetUniformStrip(4, 70, 103, 98 - 47*5, 47);
	CV_Schema.SetUniformStrip(5, 79, 94, 110 - 23*5, 23);
	
	SprFPV = DynamicSprite.Create(WoodRotConstants.VIEWPORT_WIDTH, WoodRotConstants.VIEWPORT_HEIGHT);
	
	CLevel.MapWidth = 10;
	CLevel.MapHeight = 10;
	CLevel.CellPassable = new char[CLevel.MapWidth * CLevel.MapHeight];
	String s =	""
		"1111111111"
		"1000000001"
		"1010101001"
		"1010101101"
		"1010000001"
		"1010101101"
		"1010101001"
		"1011101101"
		"1000000001"
		"1111111111"
		;
	for (int i = 0; i < s.Length; ++i) {
		CLevel.CellPassable[i] = s.Chars[i] - '0';
	}
	
	playerEye = new WorldPosition;
	playerEye.X = 5;
	playerEye.Y = 8;
	playerEye.Dir = eDirNorth;
}
