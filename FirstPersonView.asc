
void CellViewSchema::SetView(int width, int height, int row_count, int col_count) {
	if (row_count > CELLVIEW_MAX_ROWS || col_count > CELLVIEW_MAX_COLS) {
		return;
	}

	Width = width;
	Height = height;
	RowCount = row_count;
	ColCount = col_count;
}

void CellViewSchema::SetUniformStrip(int row, int y1, int y2, int x_start, int u_width) {
	if (row < 0 || row >= RowCount) {
		return;
	}

	Strips[row].Y1 = y1;
	Strips[row].Y2 = y2;
	for (int col = 0; col < ColCount; ++col) {
		Strips[row].X[col] = x_start + u_width * col;
	}
}

void CellViewSchema::SetScaling(float base_scale, float row_scale, float col_scale) {
	float BaseScale = base_scale;
	float RowScaling = row_scale;
	float ColScaling = col_scale;
	
	readonly int colMiddle = (ColCount - 1) / 2;

	float this_row_scale = base_scale;
	for (int row = 0; row < RowCount - 1; ++row) {
		float this_col_sale = this_row_scale;
		CellScaling[row, colMiddle] = this_col_sale;
		for (int col = 1; col < colMiddle; ++col) {
			this_col_sale *= col_scale;
			CellScaling[row, colMiddle - col] = this_col_sale;
			CellScaling[row, colMiddle + col] = this_col_sale;
		}
		this_row_scale *= row_scale;
	}
}

CellViewSchema CV_Schema;
export CV_Schema;


// internal data
struct FirstPersonViewData {
	// FIXME: distinct sizes of CELLS, and VERTICES
	// +1 extra cell row, because we draw front walls of the far row
	DynamicSprite *SprWalls[CELLVIEW_MAX_ROWS, CELLVIEW_MAX_COLS - 1, eCVTileNum];
	Overlay *OverWalls[CELLVIEW_MAX_ROWS, CELLVIEW_MAX_COLS - 1, eCVTileNum];
};

FirstPersonViewData FPV;


static void FirstPersonView::DrawViewport(DrawingSurface* ds, int color) {
	ds.DrawingColor = color;
	ds.DrawFrame(0, 0, CV_Schema.Width - 1, CV_Schema.Height - 1);
}

static void FirstPersonView::DrawGridFrame(DrawingSurface* ds, int cell_color, int wall_color) {
	if (cell_color > 0) {
		ds.DrawingColor = cell_color;
		// NOTE: we assume that row 0 is "behind" the player's back, so invisible
		// horizontal lines (cells fronts)
		for (int row = 1; row < CV_Schema.RowCount; ++row) {
			for (int col = 0; col < CV_Schema.ColCount - 1; ++col) {
				ds.DrawLine(CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y1, 
							CV_Schema.Strips[row].X[col + 1], 
							CV_Schema.Strips[row].Y1);
				ds.DrawLine(CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y2, 
							CV_Schema.Strips[row].X[col + 1], 
							CV_Schema.Strips[row].Y2);
			}
		}
		
		// directional lines (cell sides)
		for (int row = 0; row < CV_Schema.RowCount - 1; ++row) {
			for (int col = 0; col < CV_Schema.ColCount; ++col) {
				ds.DrawLine(CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y1, 
							CV_Schema.Strips[row + 1].X[col], 
							CV_Schema.Strips[row + 1].Y1);
				ds.DrawLine(CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y2, 
							CV_Schema.Strips[row + 1].X[col], 
							CV_Schema.Strips[row + 1].Y2);
			}
		}
	}
	
	if (wall_color > 0) {
		ds.DrawingColor = wall_color;
		for (int row = 0; row < CV_Schema.RowCount; ++row) {
			for (int col = 0; col < CV_Schema.ColCount; ++col) {
				ds.DrawLine(CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y1, 
							CV_Schema.Strips[row].X[col], 
							CV_Schema.Strips[row].Y2);
			}
		}
	}
}

// Draws particular map cell in viewport
static void FirstPersonView::DrawCell(DrawingSurface *ds, ObjectPosition *eye,
									  int mapx, int mapy, int row, int col) {
	if (mapx < 0 || mapx >= CLevel.MapWidth || mapy < 0 || mapy >= CLevel.MapHeight) {
		return;
	}
	
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	// FIXME: put these into FPV properties
	const int color_wall_1 = 7;
	const int color_wall_2 = 8;
	
	char type = CLevel.CellPassable[mapy * CLevel.MapWidth + mapx];
	if (type == 0) {
		// Draw floor and ceiling
		// --- skip for now ---
	} else {
		// Draw cell walls
		// cell lies in between the frame lines
		int frame_front_row = row;
		int frame_back_row = row + 1;
		int frame_left_col = col;
		int frame_right_col = col + 1;

		// Draw front wall always
		int front_x1 = CV_Schema.Strips[frame_front_row].X[frame_left_col];
		int front_x2 = CV_Schema.Strips[frame_front_row].X[frame_right_col];
		int front_y1 = CV_Schema.Strips[frame_front_row].Y1;
		int front_y2 = CV_Schema.Strips[frame_front_row].Y2;
		ds.DrawQuadSplit(
			front_x1, front_y1, front_x2, front_y1,
			front_x2, front_y2, front_x1, front_y2, 
			color_wall_1, color_wall_2);
		
		// Far row: only draw front wall
		if (frame_back_row == CV_Schema.RowCount) {
			return;
		}
		
		if (col < colMiddle) {
			// Draw right wall
			int side_x1 = front_x2;
			int side_x2 = CV_Schema.Strips[frame_back_row].X[frame_right_col];
			int side_y11 = front_y1;
			int side_y12 = front_y2;
			int side_y21 = CV_Schema.Strips[frame_back_row].Y1;
			int side_y22 = CV_Schema.Strips[frame_back_row].Y2;
			ds.DrawQuadSplit(
				side_x1, side_y11, side_x2, side_y21,
				side_x2, side_y22, side_x1, side_y12, 
				color_wall_1, color_wall_2);
		} else if (col > colMiddle) {
			// Draw left wall
			int side_x1 = CV_Schema.Strips[frame_back_row].X[frame_left_col];
			int side_x2 = front_x1;
			int side_y11 = CV_Schema.Strips[frame_back_row].Y1;
			int side_y12 = CV_Schema.Strips[frame_back_row].Y2;
			int side_y21 = front_y1;
			int side_y22 = front_y2;
			ds.DrawQuadSplit(
				side_x1, side_y11, side_x2, side_y21,
				side_x2, side_y22, side_x1, side_y12, 
				color_wall_1, color_wall_2);
		}
	}
}

// Draws current view as seen from the given cell into given direction
// TODO: for optimization, we might keep record of which cell views are "clean"
// and which are "dirty" and only redraw latter.
static void FirstPersonView::DrawLocation(DrawingSurface *ds, ObjectPosition *eye) {
	// Convert from the grid row/col count to inner cell count
	// FIXME?
	readonly int num_rows = CV_Schema.RowCount /*- 1*/;
	readonly int num_cols = CV_Schema.ColCount - 1;
	if (num_rows == 0 || num_cols == 0) {
		return;
	}

	readonly int colMiddle = num_cols / 2;

	// Prepare the transform axes.
	MapTransform *t = Level.GetObjectToMapTransform(eye);
	// Look around the map cells and draw what can be seen;
	// we start from the further row and come closer, far sides first.
	for (int row = num_rows; row > 0;) {
		row--;

		// Draw columns in following order: first side columns from left and
		// right coming to the middle step by step, and then finally the middle one.
		for (int col = 0; col < colMiddle; col++) {
			FirstPersonView.DrawCell(ds, eye,
				t.originX + row * t.viewRowAxisX + (col - colMiddle) * t.viewColAxisX,
				t.originY + row * t.viewRowAxisY + (col - colMiddle) * t.viewColAxisY,
				row, col);
			FirstPersonView.DrawCell(ds, eye,
				t.originX + row * t.viewRowAxisX + (colMiddle - col) * t.viewColAxisX,
				t.originY + row * t.viewRowAxisY + (colMiddle - col) * t.viewColAxisY,
				row, num_cols - col - 1);
		}
		FirstPersonView.DrawCell(ds, eye,
			t.originX + row * t.viewRowAxisX + 0 * t.viewColAxisX,
			t.originY + row * t.viewRowAxisY + 0 * t.viewColAxisY,
			row, colMiddle);
	}
}

static void FirstPersonView::ConstructLocation(int x, int y, int w, int h,
			ObjectPosition *eye, int xcam, int ycam) {
	// Convert from the grid row/col count to inner cell count
	// FIXME?
	readonly int num_rows = CV_Schema.RowCount /*- 1*/;
	readonly int num_cols = CV_Schema.ColCount - 1;
	if (num_rows == 0 || num_cols == 0) {
		return;
	}

	readonly int colMiddle = num_cols / 2;

	// Prepare the transform axes.
	MapTransform *t = Level.GetObjectToMapTransform(eye);
	// Look around the map cells and draw what can be seen;
	// we start from the further row and come closer, far sides first.
	for (int row = num_rows; row > 0;) {
		row--;

		// Draw columns in following order: first side columns from left and
		// right coming to the middle step by step, and then finally the middle one.
		for (int col = 0; col < colMiddle; col++) {
			FirstPersonView.ConstructCell(eye,
				t.originX + row * t.viewRowAxisX + (col - colMiddle) * t.viewColAxisX,
				t.originY + row * t.viewRowAxisY + (col - colMiddle) * t.viewColAxisY,
				row, col, xcam, ycam);
			FirstPersonView.ConstructCell(eye,
				t.originX + row * t.viewRowAxisX + (colMiddle - col) * t.viewColAxisX,
				t.originY + row * t.viewRowAxisY + (colMiddle - col) * t.viewColAxisY,
				row, num_cols - col - 1, xcam, ycam);
		}
		FirstPersonView.ConstructCell(eye,
			t.originX + row * t.viewRowAxisX + 0 * t.viewColAxisX,
			t.originY + row * t.viewRowAxisY + 0 * t.viewColAxisY,
			row, colMiddle, xcam, ycam);
	}
}

static void FirstPersonView::ConstructCell(ObjectPosition *eye,
			int mapx, int mapy, int row, int col, int xcam, int ycam) {
	if (mapx < 0 || mapx >= CLevel.MapWidth || mapy < 0 || mapy >= CLevel.MapHeight) {
		return;
	}
	
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	
	char type = CLevel.CellPassable[mapy * CLevel.MapWidth + mapx];
	if (type == 0) {
		// Draw floor and ceiling
		// --- skip for now ---
		// Hide walls
		FirstPersonView.HideWallTile(row, col, eCVTile_Front);
		FirstPersonView.HideWallTile(row, col, eCVTile_Side);
	} else {
		// Draw cell walls
		// Draw front wall always
		FirstPersonView.DisplayWallTile(row, col, eCVTile_Front, xcam, ycam);

		// Far row: only draw front wall
		if (row + 1 == CV_Schema.RowCount) {
			return;
		}
		
		// Draw side wall
		if (col != colMiddle) {
			FirstPersonView.DisplayWallTile(row, col, eCVTile_Side, xcam, ycam);
		}
	}
}

static void FirstPersonView::CreateWallSprite(int row, int col, CellViewTile tile) {
	// FIXME: cache this value in the schema
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	readonly bool isRightWall = col < colMiddle;
	// FIXME: put these into FPV properties
	const int color_wall_1 = 7;
	const int color_wall_2 = 8;
	
	// Calculate wall quad from the cell position
	int frame_front_row = row;
	int frame_back_row = row + 1;
	int frame_left_col = col;
	int frame_right_col = col + 1;
	int front_x1 = CV_Schema.Strips[frame_front_row].X[frame_left_col];
	int front_x2 = CV_Schema.Strips[frame_front_row].X[frame_right_col];
	int front_y1 = CV_Schema.Strips[frame_front_row].Y1;
	int front_y2 = CV_Schema.Strips[frame_front_row].Y2;
	
	int x1, x2, y11, y12, y21, y22;
	switch (tile) {
	case eCVTile_Floor: break; // TODO
	case eCVTile_Ceil: break; // TODO
	case eCVTile_Front:
		x1 = front_x1;
		x2 = front_x2;
		y11 = front_y1;
		y21 = front_y1;
		y12 = front_y2;
		y22 = front_y2;
		break;
	case eCVTile_Side:
		if (isRightWall) {
			x1 = front_x2;
			x2 = CV_Schema.Strips[frame_back_row].X[frame_right_col];
			y11 = front_y1;
			y12 = front_y2;
			y21 = CV_Schema.Strips[frame_back_row].Y1;
			y22 = CV_Schema.Strips[frame_back_row].Y2;
		} else {
			x1 = CV_Schema.Strips[frame_back_row].X[frame_left_col];
			x2 = front_x1;
			y11 = CV_Schema.Strips[frame_back_row].Y1;
			y12 = CV_Schema.Strips[frame_back_row].Y2;
			y21 = front_y1;
			y22 = front_y2;
		}
		break;
	default: break;
	}

	if (FIRST_PERSON_HALF_WALLS) {
		y11 = y11 + (y12 - y11) / 2;
		y21 = y21 + (y22 - y21) / 2;
	}
	
	int y_min = Maths.Min(y11, y21);
	DynamicSprite *dspr = DynamicSprite.Create(x2 - x1, Maths.Max(y12 - y11, y22 - y21));
	DrawingSurface *ds = dspr.GetDrawingSurface();
	ds.DrawQuadSplit(
				0, y11 - y_min, x2 - x1, y21 - y_min,
				x2 - x1, y22 - y_min, 0, y12 - y_min, 
				color_wall_1, color_wall_2);
	ds.Release();
	FPV.SprWalls[row, col, tile] = dspr;
}

static void FirstPersonView::CreateWallTile(int row, int col, CellViewTile tile, int xcam, int ycam) {
	if (FPV.SprWalls[row, col, tile] == null) {
		FirstPersonView.CreateWallSprite(row, col, tile);
	}
	
	// FIXME: cache this value in the schema
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	readonly bool isRightWall = col < colMiddle;
	
	int x, y;
	switch (tile) {
	case eCVTile_Floor: break; // TODO
	case eCVTile_Ceil: break; // TODO
	case eCVTile_Front:
		x = CV_Schema.Strips[row].X[col];
		y = CV_Schema.Strips[row].Y1;
		break;
	case eCVTile_Side:
		if (isRightWall) {
			x = CV_Schema.Strips[row].X[col + 1];
			y = CV_Schema.Strips[row].Y1;
		} else {
			x = CV_Schema.Strips[row + 1].X[col];
			y = CV_Schema.Strips[row].Y1;
		}
		break;
	default: break;
	}
	
	// z-order is increasing from far sides to the front center
	int effective_col = col <= colMiddle ? col : (colMiddle - (col - colMiddle));
	int zorder = (CELLVIEW_MAX_ROWS - row) * colMiddle + effective_col;
	
	DynamicSprite *dspr = FPV.SprWalls[row, col, tile];
	if (FIRST_PERSON_HALF_WALLS) {
		y += Game.SpriteHeight[dspr.Graphic];
	}
	Overlay *new_over = Overlay.CreateRoomGraphical(xcam + x, ycam + y, dspr.Graphic);
	new_over.ZOrder = zorder;
	FPV.OverWalls[row, col, tile] = new_over;
}

static void FirstPersonView::DisplayWallTile(int row, int col, CellViewTile tile, int xcam, int ycam) {
	
	// FIXME: cache this value in the schema
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	readonly bool isRightWall = col < colMiddle;
	
	if (FPV.OverWalls[row, col, tile] == null) {
		FirstPersonView.CreateWallTile(row, col, tile, xcam, ycam);	
	}
	
	Overlay *wall = FPV.OverWalls[row, col, tile];
	wall.Transparency = 0;
}

static void FirstPersonView::HideWallTile(int row, int col, CellViewTile tile) {
	Overlay *wall = FPV.OverWalls[row, col, tile];
	if (wall != null) {
		wall.Transparency = 100;
	}
}

static void FirstPersonView::ConstructObject(ObjectPosition *eye, ObjectPosition *obj, 
		int view, int loop, int frame, 
		Overlay *over, int xcam, int ycam) {

	//System.Log(eLogDebug, "ConstructObject: eye = %d,%d dir = %d, obj = %d,%d", 
	//	eye.X, eye.Y, eye.Dir,  obj.X, obj.Y);

	Point objlocpt = CLevel.MapToObject(eye, obj.X, obj.Y);
	//System.Log(eLogDebug, "ConstructObject: MapToLocal: obj = %d,%d", 
	//	objlocpt.x, objlocpt.y);
	// FIXME: need another function that will do this conversion too..???.....
	// translate to the CellView row/col
	readonly int colMiddle = (CV_Schema.ColCount - 1) / 2;
	int col = objlocpt.x + colMiddle;
	int row = objlocpt.y;
	//
	//System.Log(eLogDebug, "ConstructObject: local to cellview: obj = %d,%d", 
	//	col, row);
	if (col < 0 || col >= CV_Schema.ColCount - 1 ||
		row < 0 || row >= CV_Schema.RowCount) {
		// not in visible range
		//System.Log(eLogDebug, "ConstructObject: not in visible range");
		over.Transparency = 100;
		return;
	}

	// Object is located in the middle of a cell, in between the grid lines
	int frame_front_row = row;
	int frame_back_row = row + 1;
	int frame_left_col = col;
	int frame_right_col = col + 1;
	
	//System.Log(eLogDebug, "ConstructObject: frame lines: front %d,%d -> back %d,%d", 
	//	frame_front_row, frame_back_row, frame_left_col, frame_right_col);
	
	// Row too far
	if (frame_back_row == CV_Schema.RowCount) {
		//System.Log(eLogDebug, "ConstructObject: not in visible range");
		over.Transparency = 100;
		return;
	}
	
	// Now when we know that we're going to place it on screen, 
	// set up a proper graphic.
	// Calculate which loop to use, depending on the RELATIVE
	// direction of the object's facing
	ObjectDirection rel_dir = Level.MapToObjectDir(eye, obj.Dir);
	int use_loop = Level.DirToAGSLoop(rel_dir);
	//System.Log(eLogDebug, "ConstructObject: eyedir = %d, objdir = %d, rel_dir = %d, agsloop = %d", eye.Dir, obj.Dir, rel_dir, use_loop);
	ViewFrame *vf = Game.GetViewFrame(view, use_loop, frame);
	if (over.Graphic != vf.Graphic) {
		over.Graphic = vf.Graphic;
	}
	
	int y1 = CV_Schema.Strips[frame_back_row].Y2;
	int y2 = CV_Schema.Strips[frame_front_row].Y2;
	int x11 = CV_Schema.Strips[frame_front_row].X[frame_left_col];
	int x12 = CV_Schema.Strips[frame_front_row].X[frame_right_col];
	int x21 = CV_Schema.Strips[frame_back_row].X[frame_left_col];
	int x22 = CV_Schema.Strips[frame_back_row].X[frame_right_col];
	int x1 = (x11 + x12) / 2;
	int x2 = (x21 + x22) / 2;
	//System.Log(eLogDebug, "ConstructObject: x1,x2 = %d,%d", x1, x2);
	
	//System.Log(eLogDebug, "ConstructObject: pre scale w,h = %d,%d", over.Width, over.Height);
	float scaling = CV_Schema.CellScaling[row, col];
	over.Width = FloatToInt(IntToFloat(over.GraphicWidth) * scaling);
	over.Height = FloatToInt(IntToFloat(over.GraphicHeight) * scaling);
	//System.Log(eLogDebug, "ConstructObject: scaling = %f, w,h = %d,%d", scaling, over.Width, over.Height);
	int x = (x1 + x2) / 2 + xcam - over.Width / 2;
	int y = (y1 + y2) / 2 + ycam - over.Height;
	over.X = x;
	over.Y = y;
	// z-order is increasing from far sides to the front center
	int effective_col = col <= colMiddle ? col : (colMiddle - (col - colMiddle));
	int zorder = (CELLVIEW_MAX_ROWS - row) * colMiddle + effective_col;
	over.ZOrder = zorder;
	over.Transparency = 0;
}
