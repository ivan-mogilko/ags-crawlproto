
static Point *Location::ObjectToMap(WorldPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  pt.x; mpt.y = -pt.y; break;
		case eDirEast:  mpt.x =  pt.y; mpt.y =  pt.x; break;
		case eDirSouth: mpt.x = -pt.x; mpt.y =  pt.y; break;
		case eDirWest:  mpt.x = -pt.y; mpt.y = -pt.x; break;
	}
	mpt.x += who.X;
	mpt.y += who.Y;
	return mpt;
}

static Point *Location::MapToObject(WorldPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	rel_pt.x = pt.x - who.X;
	rel_pt.y = pt.y - who.Y;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  pt.x; rel_pt.y = -pt.y; break;
		case eDirEast:  rel_pt.x =  pt.y; rel_pt.y =  pt.x; break;
		case eDirSouth: rel_pt.x = -pt.x; rel_pt.y =  pt.y; break;
		case eDirWest:  rel_pt.x = -pt.y; rel_pt.y = -pt.x; break;
	}
	return rel_pt;
}

static Point *Location::ObjectDeltaToMap(WorldPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *mpt = new Point;
	switch (who.Dir) {
		case eDirNorth: mpt.x =  pt.x; mpt.y = -pt.y; break;
		case eDirEast:  mpt.x =  pt.y; mpt.y =  pt.x; break;
		case eDirSouth: mpt.x = -pt.x; mpt.y =  pt.y; break;
		case eDirWest:  mpt.x = -pt.y; mpt.y = -pt.x; break;
	}
	return mpt;
}

// NOTE: yes, it happens to be identical to ObjectDeltaToMap...
static Point *Location::MapDeltaToObject(WorldPosition *who, Point *pt) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	Point *rel_pt = new Point;
	switch (who.Dir) {
		case eDirNorth: rel_pt.x =  pt.x; rel_pt.y = -pt.y; break;
		case eDirEast:  rel_pt.x =  pt.y; rel_pt.y =  pt.x; break;
		case eDirSouth: rel_pt.x = -pt.x; rel_pt.y =  pt.y; break;
		case eDirWest:  rel_pt.x = -pt.y; rel_pt.y = -pt.x; break;
	}
	return rel_pt;
}

static MapTransform *Location::GetObjectToMapTransform(WorldPosition* who) {
	// TODO: find out if it's possible / easier to use simple 2D matrix transform
	int row_dx = 0, row_dy = 0, col_dx = 0, col_dy = 0;
	switch (who.Dir) {
		case eDirNorth: row_dy = -1; col_dx =  1; break;
		case eDirEast:  row_dx =  1; col_dy =  1; break;
		case eDirSouth: row_dy =  1; col_dx = -1; break;
		case eDirWest:  row_dx = -1; col_dy = -1; break;
	}
	MapTransform *t = new MapTransform;
	t.originX = who.X;
	t.originY = who.Y;
	t.viewRowAxisX = row_dx;
	t.viewRowAxisY = row_dy;
	t.viewColAxisX = col_dx;
	t.viewColAxisY = col_dy;
	return t;
}


Location CLevel;
export CLevel;
